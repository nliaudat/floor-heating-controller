###### Info at https://github.com/nliaudat/floor-heating-controller/wiki/heating_channel_tanh

########### Climate thermostat
climate:  
  - platform: thermostat
    id: ${id}_thermostat
    name: ${frendly_name}
    sensor: ${temperature_sensor}
    default_preset: ${default_preset}
    on_boot_restore_from: memory
    startup_delay: true
    preset: #ECO, AWAY, BOOST, COMFORT, HOME, SLEEP, ACTIVITY
      - name: ${preset_1_name}
        default_target_temperature_low: ${preset_1_target_temperature_low}
        # default_target_temperature_high: ${preset_1_target_temperature_high}
        mode: ${preset_1_mode} #OFF, AUTO, HEAT, COOL, HEAT_COOL, FAN_ONLY, DRY
      - name: ${preset_2_name}
        default_target_temperature_low: ${preset_2_target_temperature_low}
        # default_target_temperature_high: ${preset_2_target_temperature_high}
        mode: ${preset_2_mode}
      - name: ${preset_3_name}
        default_target_temperature_low: ${preset_3_target_temperature_low}
        # default_target_temperature_high: ${preset_3_target_temperature_high}
        mode: ${preset_3_mode} 
    # min_cooling_off_time: 300s
    # min_cooling_run_time: 300s
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    min_idle_time: 30s
    heat_action: 
         - lambda: 'return;' # do nothing cause action is triggered by time interval
    # cool_action:
         # - lambda: 'return;' 
    idle_action:
         - lambda: 'return;' 
    visual:
      min_temperature: ${visual_min_temperature} 
      max_temperature: ${visual_max_temperature} 
      temperature_step: ${visual_temperature_step}
    # web_server:
      # sorting_group_id: sorting_group_climate

########### cover 
cover:
  - platform: endstop
    name: CH${channel_number}
    device_class: shutter
    open_action:
      - switch.turn_on: CH${channel_number}_IA_pin
      - switch.turn_off: CH${channel_number}_IB_pin
    open_duration: 60s
    open_endstop: BEMF_${channel_number}_sensor
    close_action:
      - switch.turn_on: CH${channel_number}_IB_pin
      - switch.turn_off: CH${channel_number}_IA_pin
    close_duration: 60s
    close_endstop: BEMF_${channel_number}_sensor
    stop_action:
      - switch.turn_off: CH${channel_number}_IA_pin
      - switch.turn_off: CH${channel_number}_IB_pin
    max_duration : 65s
    #assumed_state: true
    id: CH${channel_number}_cover
    # web_server:
      # sorting_group_id: sorting_group_covers
    
number:
  - platform: template
    name: "bemf_trigger_${channel_number}"
    optimistic: true
    min_value: 0.005
    max_value: 1.50
    step: 0.005
    restore_value: true
    initial_value: ${bemf_trigger_initial_value}
    id: bemf_trigger_${channel_number}
    # web_server:
      # sorting_group_id: sorting_group_inputs
    
script:  
  - id: calibrate_CH${channel_number}_cover
    then:
      - logger.log:
          format: "Calibrate CH${channel_number}"
          tag: heat_ctrl_main
      - cover.close: CH${channel_number}_cover
      - delay: 5s
      - cover.open: CH${channel_number}_cover
      - delay: 5s
      - cover.close: CH${channel_number}_cover
      - delay: 5s
      - cover.open: CH${channel_number}_cover
      - delay: 5s
      - cover.close: CH${channel_number}_cover
      - delay: 5s
      - cover.open: CH${channel_number}_cover
      - delay: 60s
      - cover.close: CH${channel_number}_cover
      - delay: 60s
      - cover.close: CH${channel_number}_cover
      - delay: 60s
      - cover.close: CH${channel_number}_cover

  - id: TH${channel_number}_check
    then:
         - lambda: |-
                if (id(${id}_thermostat).mode == CLIMATE_MODE_OFF) {
                    if (id(CH${channel_number}_cover).position > 0) {
                        auto call = id(CH${channel_number}_cover).make_call();
                        call.set_position(0);
                        call.perform();
                        id(${id_prefix}position_logs).publish_state("Adjustment done for CH${channel_number} set to position 0 as CH${channel_number} is OFF");
                        ESP_LOGD("heat_ctrl_pos", "Adjustment done for CH${channel_number} set to position 0 as CH${channel_number} is OFF ");
                    } 
                    else{
                        id(${id_prefix}position_logs).publish_state("CH${channel_number} is OFF and at 0 position");
                        ESP_LOGD("heat_ctrl_pos", "CH${channel_number} is OFF and at 0 position");
                    }
                    return;
                }
                if (id(${id}_thermostat).preset == CLIMATE_PRESET_SLEEP ) {
                    id(${id_prefix}main_logs).publish_state("CH${channel_number} is sleeping - no position change");
                    ESP_LOGD("heat_ctrl_pos", "CH${channel_number} is sleeping - no position change ");
                    return;
                }
                id(${id_prefix}main_logs).publish_state("TH${channel_number}_check triggered");
                ESP_LOGD("heat_ctrl_main", "TH${channel_number}_check triggered");
                // check if any others actuator is running. If yes, stop action and return. 
                if (id(CH${bemf_linked_with_channel}_cover).current_operation != COVER_OPERATION_IDLE) {
                       id(${id_prefix}main_logs).publish_state("CH${bemf_linked_with_channel} running cause CH${channel_number} cancel operation");
                       ESP_LOGD("heat_ctrl_main", "CH${bemf_linked_with_channel} running cause CH${channel_number} cancel operation");
                       return;
                } 
                // get info from climate
                float current_temp = id(${id}_thermostat).current_temperature;
                float target_temp = id(${id}_thermostat).target_temperature_low;
                //float target_temp_low = id(${id}_thermostat).target_temperature_low_low;
                //float target_temp_high = id(${id}_thermostat).target_temperature_high ;
                //float diff_temp = (target_temp_high + target_temp_low)/2 - current_temp;
                float diff_temp = target_temp - current_temp;
                
                // get info from cover
                //float current_position = id(CH${channel_number}_cover).position;
                
                // Non-linear mapping parameters for heating scenario
                float A_heating = 1.0;  // Scaling factor for heating scenario (1= max)
                float B_heating = ${tanh_steepness};    // Steepness parameter for heating scenario
                float C_heating = 0.0;    // Shift parameter for heating scenario
                  
                // Calculate valve position using non-linear mapping function
                float target_position = A_heating * tanh(B_heating * diff_temp + C_heating);
                                               
                // Clip normalized valve position to ensure it's within [0, 1]
                //target_position = fmax(0.0, fmin(1.0, target_position));
                
                target_position = target_position * (id(${id_prefix}boost_factor).state)/100;
                
                //normalize
                if (target_position >1) { target_position = 1;} 
                if (target_position <0) { target_position = 0;} 
                
                //call movement if target_position change consequently
                if (abs(id(CH${channel_number}_cover).position - target_position) > id(${id_prefix}min_movement).state/100) {
                    auto call = id(CH${channel_number}_cover).make_call();
                    call.set_position(target_position);
                    call.perform();
                    id(${id_prefix}position_logs).publish_state("Adjustment done for CH${channel_number} set to position " + to_string(target_position * 100) + "% (boost=" + to_string(id(${id_prefix}boost_factor).state) + "%)");
                    ESP_LOGD("heat_ctrl_pos", "Adjustment done for CH${channel_number} set to position %.2f%% (boost=%.2f%%)", target_position, id(${id_prefix}boost_factor).state);
                } else {
                    id(${id_prefix}position_logs).publish_state("No adjustment done for CH${channel_number} to target position " + to_string(target_position * 100) + "% cause min movement (" + to_string(id(${id_prefix}min_movement).state) + "%) is not reached");
                    ESP_LOGD("heat_ctrl_pos", "No adjustment done for CH${channel_number} to target position %.2f%% cause min movement (%.2f%%) is not reached", target_position, id(${id_prefix}min_movement).state);
                }

### back electromotive force (back EMF)
### https://en.wikipedia.org/wiki/Counter-electromotive_force
               
binary_sensor:
  - platform: template
    id: BEMF_${channel_number}_sensor
    name: "BEMF CH${channel_number} sensor"
    lambda: return ((id(${bemf_sensor_adc}).state >= id(bemf_trigger_${channel_number}).state));
    on_press:
      then: 
         - lambda: |-
                if (id(CH${channel_number}_cover).current_operation == COVER_OPERATION_OPENING) {
                    auto call = id(CH${channel_number}_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    id(CH${channel_number}_cover).position  = 1.0; //1.0 = 100% = OPEN
                    id(CH${channel_number}_cover).publish_state();
                    id(${id_prefix}bemf_logs).publish_state("CH${channel_number} opening endstop reached at " + to_string(id(${bemf_sensor_adc}).state) + " V");
                    ESP_LOGD("heat_ctrl_bemf", "CH${channel_number} opening endstop reached at %f V", id(${bemf_sensor_adc}).state);
                } else if (id(CH${channel_number}_cover).current_operation == COVER_OPERATION_CLOSING) {
                    auto call = id(CH${channel_number}_cover).make_call();
                    call.set_command_stop();
                    call.perform();
                    id(CH${channel_number}_cover).position  = 0.0; //0.0 = 0% = CLOSED
                    id(CH${channel_number}_cover).publish_state();
                    id(${id_prefix}bemf_logs).publish_state("CH${channel_number} closing endstop reached at " + to_string(id(${bemf_sensor_adc}).state) + " V");
                    ESP_LOGD("heat_ctrl_bemf", "CH${channel_number} closing endstop reached at %f V", id(${bemf_sensor_adc}).state);
                }
    internal: true  
    # filters:
    # - delayed_on_off: 50ms # prevent trigger at motor start : https://esphome.io/components/binary_sensor/
    # web_server:
      # sorting_group_id: sorting_group_BEMF

switch: 
  - platform: gpio
    name: "CH${channel_number} IA"
    pin:
      sn74hc595: sn74hc595_hub
      number: ${sn74hc595_IA_pin}
      inverted: False
    internal: true  
    on_turn_on: #interlock do not support templating => replaced with switch.turn_off
        - switch.turn_off: CH${channel_number}_IB_pin
        - delay: 200ms #allow for switching time and any discharge
    id: CH${channel_number}_IA_pin
    #interlock: [CH${channel_number}_IA_pin, CH${channel_number}_IB_pin] #interlock: &interlock_group_CH1 [CH1_IA_pin, CH1_IB_pin]
    restore_mode: always off
  - platform: gpio
    name: "CH${channel_number} IB"
    pin:
      sn74hc595: sn74hc595_hub
      number: ${sn74hc595_IB_pin}
      inverted: False
    internal: true 
    on_turn_on:
        - switch.turn_off: CH${channel_number}_IA_pin
        - delay: 200ms #allow for switching time and any discharge
    id: CH${channel_number}_IB_pin
    #interlock: CH${channel_number}_IA_pin #interlock: *interlock_group_CH1
    restore_mode: always off
    
  - platform: template
    name: "Run ${frendly_name} check"
    turn_on_action:
      - script.execute: TH${channel_number}_check    
    # web_server:
      # sorting_group_id: sorting_group_actions
      
interval:
  - interval: ${check_interval}
    then:
      - script.execute: TH${channel_number}_check
      

# sensor:
    # - platform: template
      # id: bemf_opening_${channel_number}
      # name: bemf_opening_${channel_number}
      # accuracy_decimals: 0
      # update_interval: never
      # unit_of_measurement: 'mV'
      # device_class: voltage
      # state_class: measurement
      # #internal: true
      
    # - platform: template
      # id: bemf_closing_${channel_number}
      # name: bemf_closing_${channel_number}
      # accuracy_decimals: 0
      # update_interval: never
      # unit_of_measurement: 'mV'
      # device_class: voltage
      # state_class: measurement
      # #internal: true